# SSCalendar - Render Deployment Guide

## Prerequisites
- Render account (https://render.com)
- GitHub repository with your SSCalendar code
- MongoDB Atlas database
- Google Cloud Console OAuth setup

## Step 1: Prepare Your Repository

### 1.1 Repository Structure
Ensure your repository has this structure:
```
sscalendar/
├── client/          # React frontend
├── server/          # Express backend
├── package.json     # Root package.json
└── README.md
```

### 1.2 Root Package.json
Create/update root package.json:
```json
{
  "name": "sscalendar",
  "version": "1.0.0",
  "scripts": {
    "build": "cd client && npm install && npm run build",
    "start": "cd server && npm install && npm start"
  },
  "engines": {
    "node": "18.x"
  }
}
```

## Step 2: Backend Deployment on Render

### 2.1 Create Web Service
1. Go to Render Dashboard
2. Click "New +" → "Web Service"
3. Connect your GitHub repository
4. Configure service:
   - **Name**: `sscalendar-backend`
   - **Environment**: `Node`
   - **Region**: Choose closest to your users
   - **Branch**: `main` (or your default branch)
   - **Root Directory**: `server`
   - **Build Command**: `npm install`
   - **Start Command**: `npm start`

### 2.2 Environment Variables
Add these environment variables in Render:

```bash
# MongoDB Connection
MONGODB_URI=mongodb+srv://harithcb22:H4rithP3rum4l@cluster0.ga2tc.mongodb.net/GuardShare?retryWrites=true&w=majority&appName=Cluster0

# Google OAuth
GOOGLE_CLIENT_ID=70995210409-osvu98nv8igogfk4n8t2rro16tcdnd0i.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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

# JWT Secret (generate a strong random string)
JWT_SECRET=your_super_secure_jwt_secret_key_here_make_it_very_long_and_random_123456789

# Client URL (will be updated after frontend deployment)
CLIENT_URL=https://your-frontend-app.netlify.app

# Server Port
PORT=10000

# Environment
NODE_ENV=production
```

### 2.3 Deploy Backend
1. Click "Create Web Service"
2. Wait for deployment to complete
3. Note your backend URL: `https://your-backend-app.onrender.com`

## Step 3: Frontend Deployment on Render (Alternative to Netlify)

### 3.1 Create Static Site
1. Go to Render Dashboard
2. Click "New +" → "Static Site"
3. Connect your GitHub repository
4. Configure:
   - **Name**: `sscalendar-frontend`
   - **Branch**: `main`
   - **Root Directory**: `client`
   - **Build Command**: `npm install && npm run build`
   - **Publish Directory**: `dist`

### 3.2 Environment Variables for Frontend
```bash
VITE_GOOGLE_CLIENT_ID=70995210409-osvu98nv8igogfk4n8t2rro16tcdnd0i.apps.googleusercontent.com
VITE_API_BASE_URL=https://your-backend-app.onrender.com
```

### 3.3 Add Redirects for SPA
Create `client/public/_redirects` file:
```
/*    /index.html   200
```

## Step 4: Update Google Cloud Console

### 4.1 Update OAuth Settings
1. Go to Google Cloud Console
2. Navigate to "APIs & Services" → "Credentials"
3. Edit your OAuth 2.0 client

### 4.2 Add Authorized JavaScript Origins
```
https://your-frontend-app.onrender.com
https://your-backend-app.onrender.com
```

### 4.3 Add Authorized Redirect URIs
```
https://your-frontend-app.onrender.com
https://your-frontend-app.onrender.com/auth/callback
https://your-backend-app.onrender.com/auth/callback
```

## Step 5: Update Environment Variables

### 5.1 Update Backend CLIENT_URL
In your backend Render service, update:
```bash
CLIENT_URL=https://your-frontend-app.onrender.com
```

### 5.2 Update Frontend API URL
In your frontend Render service, update:
```bash
VITE_API_BASE_URL=https://your-backend-app.onrender.com
```

## Step 6: MongoDB Atlas Configuration

### 6.1 Whitelist Render IPs
1. Go to MongoDB Atlas
2. Network Access → Add IP Address
3. Add: `0.0.0.0/0` (allow all) or specific Render IPs
4. Or use: `Allow access from anywhere`

### 6.2 Database User
Ensure your database user has read/write permissions:
- Username: `harithcb22`
- Password: `H4rithP3rum4l`
- Database: `GuardShare`

## Step 7: Testing Deployment

### 7.1 Backend Health Check
Test: `https://your-backend-app.onrender.com/api/health`
Expected response:
```json
{
  "status": "OK",
  "timestamp": "2024-01-01T00:00:00.000Z"
}
```

### 7.2 Frontend Access
1. Visit: `https://your-frontend-app.onrender.com`
2. Test Google Sign-In
3. Create/view events
4. Check all functionality

## Step 8: Custom Domain (Optional)

### 8.1 Backend Custom Domain
1. In Render backend service → Settings
2. Add custom domain: `api.yourdomain.com`
3. Update DNS CNAME record

### 8.2 Frontend Custom Domain
1. In Render frontend service → Settings
2. Add custom domain: `yourdomain.com`
3. Update DNS CNAME record

### 8.3 Update Environment Variables
Update all references to use custom domains.

## Troubleshooting

### Common Issues

#### 1. Build Failures
- Check Node.js version compatibility
- Verify package.json scripts
- Check build logs for specific errors

#### 2. Environment Variables
- Ensure all required variables are set
- Check for typos in variable names
- Verify MongoDB connection string

#### 3. CORS Issues
- Verify CLIENT_URL in backend matches frontend URL
- Check Google OAuth origins and redirects
- Ensure proper CORS configuration

#### 4. Database Connection
- Check MongoDB Atlas IP whitelist
- Verify connection string format
- Test database connectivity

### Render-Specific Tips

#### 1. Free Tier Limitations
- Services sleep after 15 minutes of inactivity
- 750 hours/month limit
- Consider upgrading for production

#### 2. Build Optimization
- Use `.nvmrc` file to specify Node version
- Optimize build commands for faster deployment
- Use build caching when possible

#### 3. Monitoring
- Check service logs in Render dashboard
- Set up health checks
- Monitor performance metrics

## Security Checklist

- [ ] Strong JWT secret (32+ characters)
- [ ] MongoDB Atlas IP restrictions
- [ ] Google OAuth domains properly configured
- [ ] Environment variables secured
- [ ] HTTPS enforced
- [ ] Rate limiting enabled
- [ ] Input validation implemented

## Performance Optimization

### Backend
- Enable compression middleware
- Implement database indexing
- Use connection pooling
- Add response caching

### Frontend
- Optimize bundle size
- Enable gzip compression
- Use CDN for static assets
- Implement lazy loading

## Maintenance

### Regular Tasks
- Monitor service health
- Update dependencies
- Rotate JWT secrets
- Review access logs
- Backup database

### Scaling Considerations
- Upgrade Render plans as needed
- Implement horizontal scaling
- Add load balancing
- Consider database sharding

## Support Resources

- Render Documentation: https://render.com/docs
- MongoDB Atlas Support: https://docs.atlas.mongodb.com
- Google OAuth Documentation: https://developers.google.com/identity
- Node.js Best Practices: https://nodejs.org/en/docs/guides